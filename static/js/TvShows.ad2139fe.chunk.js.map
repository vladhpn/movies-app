{"version":3,"file":"static/js/TvShows.ad2139fe.chunk.js","mappings":"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","sources":["api.js","components/MovieCard/MovieCard.jsx","components/SearchForm/SearchForm.jsx","pages/TvShows/TvShows.jsx","redux/tv/tv-operations.js"],"sourcesContent":["export const imageUrl = 'https://image.tmdb.org/t/p/w500';\nexport const posterUrl = 'https://image.tmdb.org/t/p/original';\n","import { posterUrl } from '../../api'\n\nimport defaultImg from '../../images/no-image.jpeg'\n\nexport const MovieCard = ({ data, path }) => {\n\n  const url = path === 'movies' ? 'movies' : 'tv-shows'\n\n  return (\n    <div className='group w-[248px] mb-8 hover:scale-110 ease-in-out duration-300 '>\n          <a href={`/${url}/${data.id}`}>\n        <img\n          className='object-cover h-[370px]'\n          src={data.poster_path ? posterUrl + `${data.poster_path}` : defaultImg}\n          alt={data.original_title}\n        />\n        <h4 className='text-white text-xl group-hover:text-purple-500 mt-2'>\n          {!data.title ? data.name : data.title}\n        </h4>\n      </a>\n    </div>\n  );\n};\n","export const SearchForm = ({ handleSubmit, movieTitle, handleInputChange }) => {\n\n  return (<>\n        <h1 className='text-center m-8 text-6xl text-white'>Trending Today</h1>\n          <div className='w-2/5  ml-auto mr-auto mb-10'>\n        <form onSubmit={handleSubmit}>\n          <label className='relative block'>\n            <span className='sr-only text-white'>Search</span>\n            <span className='absolute inset-y-0 left-0 flex items-center pl-2'>\n              <button>\n                <svg\n                  xmlns='http://www.w3.org/2000/svg'\n                  fill='none'\n                  viewBox='0 0 24 24'\n                  strokeWidth={1.5}\n                  stroke='white'\n                  className='w-6 h-6 stroke-white hover:stroke-purple-500'\n                >\n                  <path\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    d='M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z'\n                  />\n                </svg>\n              </button>\n            </span>\n            <input\n              className='placeholder:italic placeholder:text-slate-400 block bg-zinc-800 w-full h-12 border border-slate-300 rounded-md py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-purple-500 focus:shadow-md focus:shadow-purple-500 focus:ring-purple-500 focus:ring-1 sm:text-sm text-white'\n              placeholder='Search movies'\n              type='text'\n              name='search'\n              value={movieTitle}\n              onChange={handleInputChange}\n            />\n          </label>\n        </form>\n    </div>\n    </>\n    )\n}","import { useEffect, useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { MovieCard } from '../../components/MovieCard/MovieCard';\nimport { SearchForm } from '../../components/SearchForm/SearchForm';\n\nimport {\n  fetchTrendingTvShows,\n  fetchTvByTitle,\n} from '../../redux/tv/tv-operations';\n\nconst TvShows = () => {\n  const [tvTitle, setTvTitle] = useState('');\n  const [isSearch, setIsSearch] = useState(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTrendingTvShows());\n  }, [dispatch]);\n\n  const trendingTvShows = useSelector(\n    (state) => state.tv.trendingTvShowReducer\n  );\n\n  const tvByTitle = useSelector((state) => state.tv.tvByTitleReducer);\n\n  const handleInputChange = useCallback((event) => {\n    setTvTitle(event.currentTarget.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    (event) => {\n      event.preventDefault();\n      dispatch(fetchTvByTitle(tvTitle));\n      setTvTitle('');\n      setIsSearch(true);\n    },\n    [dispatch, tvTitle]\n  );\n\n  console.log(trendingTvShows);\n\n  const tvShows = !isSearch ? trendingTvShows : tvByTitle;\n\n  return (\n    <div className='mx-20'>\n      <SearchForm\n        handleSubmit={handleSubmit}\n        movieTitle={tvTitle}\n        handleInputChange={handleInputChange}\n      />\n\n      <div className='flex flex-wrap'>\n        {tvShows.map((tv) => (\n          <div key={tv.id} className='mr-2'>\n            <MovieCard data={tv} path='tv-show' />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TvShows;\n","import axios from 'axios';\nimport {\n  fetchPopuladTvShowRequest,\n  fetchPopuladTvShowSuccess,\n  fetchPopuladTvShowError,\n  fetchTopTvShowRequest,\n  fetchTopTvShowSuccess,\n  fetchTopTvShowError,\n  fetchTrendingTvShowsRequest,\n  fetchTrendingTvShowsSuccess,\n  fetchTrendingTvShowsError,\n  fetchTvByTitleRequest,\n  fetchTvByTitleSuccess,\n  fetchTvByTitleError,\n  fetchTvDetailsRequest,\n  fetchTvDetailsSuccess,\n  fetchTvDetailsError,\n  fetchTvTrailerRequest,\n  fetchTvTrailerSuccess,\n  fetchTvTrailerError,\n  fetchTvCastRequest,\n  fetchTvCastSuccess,\n  fetchTvCastError,\n} from './tv-action';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nexport const fetchPopularTvShow = () => async (dispatch) => {\n  dispatch(fetchPopuladTvShowRequest());\n  try {\n    const response = await axios.post(\n      `https://api.themoviedb.org/3/tv/popular?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchPopuladTvShowSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchPopuladTvShowError(error.message));\n  }\n};\n\nexport const fetchTopTvShow = () => async (dispatch) => {\n  dispatch(fetchTopTvShowRequest());\n  try {\n    const response = await axios.post(\n      `https://api.themoviedb.org/3/tv/top_rated?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTopTvShowSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTopTvShowError(error.message));\n  }\n};\n\nexport const fetchTrendingTvShows = () => async (dispatch) => {\n  dispatch(fetchTrendingTvShowsRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/tv/day?api_key=${apiKey}`\n    );\n\n    dispatch(fetchTrendingTvShowsSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTrendingTvShowsError(error.message));\n  }\n};\n\nexport const fetchTvByTitle = (query) => async (dispatch) => {\n  dispatch(fetchTvByTitleRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/tv?api_key=${apiKey}&query=${query}`\n    );\n\n    dispatch(fetchTvByTitleSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTvByTitleError(error.message));\n  }\n};\n\nexport const fetchTvDetails = (id) => async (dispatch) => {\n  dispatch(fetchTvDetailsRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/tv/${id}?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTvDetailsSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchTvDetailsError(error.message));\n  }\n};\n\nexport const fetchTvTrailer = (id) => async (dispatch) => {\n  dispatch(fetchTvTrailerRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/tv/${id}/videos?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTvTrailerSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTvTrailerError(error.message));\n  }\n};\n\nexport const fetchTvCast = (id) => async (dispatch) => {\n  dispatch(fetchTvCastRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/tv/${id}/credits?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTvCastSuccess(response.data.cast));\n  } catch (error) {\n    dispatch(fetchTvCastError(error.message));\n  }\n};\n"],"names":["imageUrl","posterUrl","MovieCard","data","url","path","className","href","id","src","poster_path","defaultImg","alt","original_title","title","name","SearchForm","handleSubmit","movieTitle","handleInputChange","onSubmit","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","placeholder","type","value","onChange","useState","tvTitle","setTvTitle","isSearch","setIsSearch","dispatch","useDispatch","useEffect","fetchTrendingTvShows","trendingTvShows","useSelector","state","tv","trendingTvShowReducer","tvByTitle","tvByTitleReducer","useCallback","event","currentTarget","preventDefault","fetchTvByTitle","console","log","tvShows","map","apiKey","process","fetchPopularTvShow","fetchPopuladTvShowRequest","axios","response","fetchPopuladTvShowSuccess","results","fetchPopuladTvShowError","message","fetchTopTvShow","fetchTopTvShowRequest","fetchTopTvShowSuccess","fetchTopTvShowError","fetchTrendingTvShowsRequest","fetchTrendingTvShowsSuccess","fetchTrendingTvShowsError","query","fetchTvByTitleRequest","fetchTvByTitleSuccess","fetchTvByTitleError","fetchTvDetails","fetchTvDetailsRequest","fetchTvDetailsSuccess","fetchTvDetailsError","fetchTvTrailer","fetchTvTrailerRequest","fetchTvTrailerSuccess","fetchTvTrailerError","fetchTvCast","fetchTvCastRequest","fetchTvCastSuccess","cast","fetchTvCastError"],"sourceRoot":""}