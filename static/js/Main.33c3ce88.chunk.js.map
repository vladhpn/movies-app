{"version":3,"file":"static/js/Main.33c3ce88.chunk.js","mappings":"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","sources":["api.js","components/MovieCardForSlider/MovieCardForSlider.jsx","components/Slider/Slider.jsx","pages/Main/Main.jsx","redux/movies/movies-operations.js","redux/tv/tv-operations.js"],"sourcesContent":["export const imageUrl = 'https://image.tmdb.org/t/p/w500';\nexport const posterUrl = 'https://image.tmdb.org/t/p/original';\n","import { posterUrl } from '../../api'\nimport defaultImg from '../../images/no-image-main.jpeg'\n\nexport const MovieCardForSlider = ({ data, path }) => { \n\n   const url = path === 'movies' ? 'movies' : 'tv-shows'\n  return (\n    <div>\n      <div className='group w-[320px]  mt-4'>\n        <a href={`/${url}/${data.id}`}>\n          <img\n            className='object-cover'\n            src={data.backdrop_path ? posterUrl + `${data.backdrop_path}` : defaultImg}\n            alt={data.original_title}\n          />\n          <h4 className='text-white text-xl group-hover:text-purple-500 mt-2'>\n            {!data.title ? data.name : data.title}\n          </h4>\n        </a>\n      </div>\n    </div>\n  );\n};\n","import { Swiper, SwiperSlide } from 'swiper/react';\nimport { MovieCardForSlider } from '../../components/MovieCardForSlider/MovieCardForSlider';\nimport 'swiper/swiper-bundle.min.css';\n\nexport const Slider = ({ slides, title, path }) => {\n  return (\n    <>\n      <h3 className='text-white text-4xl mt-8'>{title}</h3>\n      <Swiper spaceBetween={slides.length} slidesPerView={4}>\n        {slides.map((slide) => (\n          <SwiperSlide key={slide.id}>\n            <MovieCardForSlider data={slide} path={path} />\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  fetchPopularMovies,\n  fetchTopMovies,\n} from '../../redux/movies/movies-operations';\nimport {\n  fetchPopularTvShow,\n  fetchTopTvShow,\n} from '../../redux/tv/tv-operations';\nimport { Slider } from '../../components/Slider/Slider';\n\nconst Main = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPopularMovies());\n    dispatch(fetchTopMovies());\n    dispatch(fetchPopularTvShow());\n    dispatch(fetchTopTvShow());\n  }, [dispatch]);\n\n  const popularMovies = useSelector(\n    (state) => state.movies.popularMoviesReducer\n  );\n\n  const topMovies = useSelector((state) => state.movies.topMoviesReducer);\n\n  const popularTvShow = useSelector((state) => state.tv.popularTvShowReducer);\n\n  const topTvShow = useSelector((state) => state.tv.topTvShowReducer);\n\n  return (\n    <div className='mx-20 pb-10'>\n      <Slider slides={popularMovies} title={'Popular Movies'} path='movies' />\n      <Slider slides={topMovies} title={'Top Rated Movies'} path='movies' />\n      <Slider slides={popularTvShow} title={'Popular TV Shows'} path='tv-shows' />\n      <Slider slides={topTvShow} title={'Top Rated TV Shows'} path='tv-shows' />\n    </div>\n  );\n};\n\nexport default Main;\n","import axios from 'axios';\nimport {\n  fetchPopuladMoviesRequest,\n  fetchPopuladMoviesSuccess,\n  fetchPopuladMoviesError,\n  fetchTopMoviesRequest,\n  fetchTopMoviesSuccess,\n  fetchTopMoviesError,\n  fetchTrendingMoviesRequest,\n  fetchTrendingMoviesSuccess,\n  fetchTrendingMoviesError,\n  fetchMovieByTitleRequest,\n  fetchMovieByTitleSuccess,\n  fetchMovieByTitleError,\n  fetchMovieDetailsSuccess,\n  fetchMovieDetailsError,\n  fetchMovieDetailsRequest,\n  fetchMovieTrailerRequest,\n  fetchMovieTrailerSuccess,\n  fetchMovieTrailerError,\n  fetchMovieCastRequest,\n  fetchMovieCastSuccess,\n  fetchMovieCastError,\n} from './movies-action.js';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nexport const fetchPopularMovies = () => async (dispatch) => {\n  dispatch(fetchPopuladMoviesRequest());\n  try {\n    const response = await axios.post(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchPopuladMoviesSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchPopuladMoviesError(error.message));\n  }\n};\n\nexport const fetchTopMovies = () => async (dispatch) => {\n  dispatch(fetchTopMoviesRequest());\n  try {\n    const response = await axios.post(\n      `https://api.themoviedb.org/3/movie/top_rated?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTopMoviesSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTopMoviesError(error.message));\n  }\n};\n\nexport const fetchTrendingMovies = () => async (dispatch) => {\n  dispatch(fetchTrendingMoviesRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`\n    );\n\n    dispatch(fetchTrendingMoviesSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTrendingMoviesError(error.message));\n  }\n};\n\nexport const fetchMovieByTitle = (query) => async (dispatch) => {\n  dispatch(fetchMovieByTitleRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`\n    );\n\n    dispatch(fetchMovieByTitleSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchMovieByTitleError(error.message));\n  }\n};\n\nexport const fetchMovieDetails = (id) => async (dispatch) => {\n  dispatch(fetchMovieDetailsRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchMovieDetailsSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchMovieDetailsError(error.message));\n  }\n};\n\nexport const fetchMovieTrailer = (id) => async (dispatch) => {\n  dispatch(fetchMovieTrailerRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchMovieTrailerSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchMovieTrailerError(error.message));\n  }\n};\n\nexport const fetchMovieCast = (id) => async (dispatch) => {\n  dispatch(fetchMovieCastRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchMovieCastSuccess(response.data.cast));\n  } catch (error) {\n    dispatch(fetchMovieCastError(error.message));\n  }\n};\n","import axios from 'axios';\nimport {\n  fetchPopuladTvShowRequest,\n  fetchPopuladTvShowSuccess,\n  fetchPopuladTvShowError,\n  fetchTopTvShowRequest,\n  fetchTopTvShowSuccess,\n  fetchTopTvShowError,\n  fetchTrendingTvShowsRequest,\n  fetchTrendingTvShowsSuccess,\n  fetchTrendingTvShowsError,\n  fetchTvByTitleRequest,\n  fetchTvByTitleSuccess,\n  fetchTvByTitleError,\n  fetchTvDetailsRequest,\n  fetchTvDetailsSuccess,\n  fetchTvDetailsError,\n  fetchTvTrailerRequest,\n  fetchTvTrailerSuccess,\n  fetchTvTrailerError,\n  fetchTvCastRequest,\n  fetchTvCastSuccess,\n  fetchTvCastError,\n} from './tv-action';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nexport const fetchPopularTvShow = () => async (dispatch) => {\n  dispatch(fetchPopuladTvShowRequest());\n  try {\n    const response = await axios.post(\n      `https://api.themoviedb.org/3/tv/popular?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchPopuladTvShowSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchPopuladTvShowError(error.message));\n  }\n};\n\nexport const fetchTopTvShow = () => async (dispatch) => {\n  dispatch(fetchTopTvShowRequest());\n  try {\n    const response = await axios.post(\n      `https://api.themoviedb.org/3/tv/top_rated?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTopTvShowSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTopTvShowError(error.message));\n  }\n};\n\nexport const fetchTrendingTvShows = () => async (dispatch) => {\n  dispatch(fetchTrendingTvShowsRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/tv/day?api_key=${apiKey}`\n    );\n\n    dispatch(fetchTrendingTvShowsSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTrendingTvShowsError(error.message));\n  }\n};\n\nexport const fetchTvByTitle = (query) => async (dispatch) => {\n  dispatch(fetchTvByTitleRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/tv?api_key=${apiKey}&query=${query}`\n    );\n\n    dispatch(fetchTvByTitleSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTvByTitleError(error.message));\n  }\n};\n\nexport const fetchTvDetails = (id) => async (dispatch) => {\n  dispatch(fetchTvDetailsRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/tv/${id}?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTvDetailsSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchTvDetailsError(error.message));\n  }\n};\n\nexport const fetchTvTrailer = (id) => async (dispatch) => {\n  dispatch(fetchTvTrailerRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/tv/${id}/videos?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTvTrailerSuccess(response.data.results));\n  } catch (error) {\n    dispatch(fetchTvTrailerError(error.message));\n  }\n};\n\nexport const fetchTvCast = (id) => async (dispatch) => {\n  dispatch(fetchTvCastRequest());\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/tv/${id}/credits?api_key=${apiKey}&language=en-US`\n    );\n\n    dispatch(fetchTvCastSuccess(response.data.cast));\n  } catch (error) {\n    dispatch(fetchTvCastError(error.message));\n  }\n};\n"],"names":["imageUrl","posterUrl","MovieCardForSlider","data","url","path","className","href","id","src","backdrop_path","defaultImg","alt","original_title","title","name","Slider","slides","spaceBetween","length","slidesPerView","map","slide","dispatch","useDispatch","useEffect","fetchPopularMovies","fetchTopMovies","fetchPopularTvShow","fetchTopTvShow","popularMovies","useSelector","state","movies","popularMoviesReducer","topMovies","topMoviesReducer","popularTvShow","tv","popularTvShowReducer","topTvShow","topTvShowReducer","apiKey","process","fetchPopuladMoviesRequest","axios","response","fetchPopuladMoviesSuccess","results","fetchPopuladMoviesError","message","fetchTopMoviesRequest","fetchTopMoviesSuccess","fetchTopMoviesError","fetchTrendingMovies","fetchTrendingMoviesRequest","fetchTrendingMoviesSuccess","fetchTrendingMoviesError","fetchMovieByTitle","query","fetchMovieByTitleRequest","fetchMovieByTitleSuccess","fetchMovieByTitleError","fetchMovieDetails","fetchMovieDetailsRequest","fetchMovieDetailsSuccess","fetchMovieDetailsError","fetchMovieTrailer","fetchMovieTrailerRequest","fetchMovieTrailerSuccess","fetchMovieTrailerError","fetchMovieCast","fetchMovieCastRequest","fetchMovieCastSuccess","cast","fetchMovieCastError","fetchPopuladTvShowRequest","fetchPopuladTvShowSuccess","fetchPopuladTvShowError","fetchTopTvShowRequest","fetchTopTvShowSuccess","fetchTopTvShowError","fetchTrendingTvShows","fetchTrendingTvShowsRequest","fetchTrendingTvShowsSuccess","fetchTrendingTvShowsError","fetchTvByTitle","fetchTvByTitleRequest","fetchTvByTitleSuccess","fetchTvByTitleError","fetchTvDetails","fetchTvDetailsRequest","fetchTvDetailsSuccess","fetchTvDetailsError","fetchTvTrailer","fetchTvTrailerRequest","fetchTvTrailerSuccess","fetchTvTrailerError","fetchTvCast","fetchTvCastRequest","fetchTvCastSuccess","fetchTvCastError"],"sourceRoot":""}